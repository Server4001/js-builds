{"version":3,"sources":["not-compiled/component_lifecycle.js"],"names":[],"mappings":"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","file":"not-compiled/component_lifecycle.js","sourcesContent":["var CanvasUploader = React.createClass({displayName: \"CanvasUploader\",\n    getInitialState: function() {\n        return {\n            people: []\n        };\n    },\n    loadData: function() {\n        return $.get(`https://amber-heat-5838.firebaseio.com/${this.props.url}.json`);\n    },\n    componentWillMount: function() {\n        // Called immediately before the component is rendered. No DOM access.\n        console.log(\"componentWillMount\");\n    },\n    componentDidMount: function() {\n        // Called immediately after the component is rendered. Has DOM access.\n        this.loadData().then(function(data) {\n            this.setState({people: data});\n        }.bind(this));\n\n        // Twitter Bootstrap tooltip:\n        $('#tip').tooltip();\n    },\n    componentWillReceiveProps: function(nextProps) {\n        // Called when a component is receiving NEW props. Not fired when the initial props are set.\n        // nextProps contains the new set of props. The current props are accessible via this.props.\n        console.log('componentWillReceiveProps');\n        console.log(this.props);\n        console.log(nextProps);\n        // You can make this function run by executing the following code in the Chrome Dev Console:\n        // myComponent.setProps({ url: \"whatever\" });\n    },\n    componentWillUpdate: function(nextProps, nextState) {\n        // Invoked immediately before rendering when new props or state are being received.\n        console.log('componentWillUpdate');\n    },\n    componentDidUpdate: function(prevProps, prevState) {\n        // Invoked immediately after the component's updates are flushed to the DOM.\n        console.log('componentDidUpdate');\n    },\n    shouldComponentUpdate: function(nextProps, nextState) {\n        // Invoked before rendering, when new props or state are being received. Used to determine if the component\n        // should be re-rendered or not. Returning false will skip the render method until the next state change.\n        console.log('shouldComponentUpdate');\n        return this.props.url !== nextProps.url || this.state.people.length !== nextState.people.length;\n    },\n    componentWillUnmount: function() {\n        // Invoked immediately before a component is unmounted from the DOM.\n        console.log('componentWillUnmount');\n        $('#tip').tooltip('destroy');\n        // To fire this method, type the following command into Chrome Dev Console:\n        // React.unmountComponentAtNode(document.getElementById('content'));\n    },\n    render: function() {\n        var personHtml = function(person) {\n            return React.createElement(\"li\", null, \"Name: \", person.firstname, \" \", person.lastname, \". Age: \", person.age);\n        };\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"ul\", null, \n                    this.state.people.map(personHtml)\n                ), \n                React.createElement(\"p\", null, this.props.url), \n                React.createElement(\"a\", {href: \"#\", id: \"tip\", \"data-toggle\": \"tooltip\", title: \"This is the tooltip title\"}, \"Hover over me for a tooltip\")\n            )\n        );\n    }\n});\nvar myComponent = React.render(React.createElement(CanvasUploader, {url: \"people\"}), document.getElementById('content'));\n"]}