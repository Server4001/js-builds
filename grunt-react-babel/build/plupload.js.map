{"version":3,"sources":["not-compiled/plupload.js"],"names":[],"mappings":"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","file":"not-compiled/plupload.js","sourcesContent":["class PlUpload extends React.Component {\n    constructor(props) {\n        super(props);\n        // Instead of providing a separate getInitialState method, you set up your own state property in the constructor.\n        this.state = {\n            uploader: null\n        };\n    }\n\n    componentWillMount() {\n        console.log(\"componentWillMount\");\n    }\n\n    componentDidMount() {\n        this.initUploader();\n\n        this.state.uploader.init();\n\n        this.state.uploader.bind('PostInit', this.postInit.bind(this));\n        this.state.uploader.bind('FilesAdded', this.filesAdded.bind(this));\n        this.state.uploader.bind('UploadProgress', this.uploadProgress.bind(this));\n        this.state.uploader.bind('Error', this.uploadError.bind(this));\n        this.state.uploader.bind('FileUploaded', this.fileUploaded.bind(this));\n    }\n\n    postInit() {\n        document.getElementById('js-filelist').innerHTML = '';\n    }\n\n    filesAdded() {\n        this.state.uploader.start();\n    }\n\n    uploadProgress(up, file) {\n        console.log(`File: ${file.id}. Percent: ${file.percent}`);\n    }\n\n    fileUploaded(up, file, info) {\n        console.log('FileUploaded');\n    }\n\n    uploadError(up, err) {\n        console.log(\"Error #\" + err.code + \": \" + err.message);\n        if (err.code === '-600' || err.message.toLowerCase() === 'file size error.') {\n            alert('Whoops! The max file size you can upload is: ' + maxFileSize);\n        } else {\n            alert('Whoops! An error occurred while trying to upload your file. Please try again.');\n        }\n    }\n\n    initUploader() {\n        this.state.uploader = new plupload.Uploader({\n            runtimes: 'html5,silverlight',\n            browse_button: 'js-pickfiles',\n            container: document.getElementById('uploader'),\n            url: this.props.url,\n            silverlight_xap_url: '/bower_components/plupload/ls/Moxie.xap',\n            chunk_size: this.props.chunkSize,\n            max_retries: this.props.maxRetries,\n            multipart: true,\n            multi_selection: false,\n            filters: {\n                max_file_size: '999mb',\n                mime_types: [\n                    {title: \"Image files\", extensions: \"jpg,jpeg,gif,png,pdf,tif,tiff,ai,psd,eps,svg\"}\n                ],\n                prevent_duplicates: false\n            }\n        });\n    }\n\n    render() {\n        return (\n            React.createElement(\"div\", {id: \"uploader\"}, \n                React.createElement(\"button\", {id: \"js-pickfiles\"}, \"Click Me\"), \n                React.createElement(\"div\", {id: \"js-filelist\"})\n            )\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        console.log('componentWillReceiveProps');\n    }\n\n    componentWillUpdate() {\n        console.log('componentWillUpdate');\n    }\n\n    componentDidUpdate() {\n        console.log('componentDidUpdate');\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate');\n        return true;\n    }\n\n    componentWillUnmount() {\n        console.log('componentWillUnmount');\n    }\n}\n\n// propTypes and defaultProps are defined as properties on the constructor, instead of in the class body\nPlUpload.propTypes = {\n    chunkSize: React.PropTypes.number,\n    maxRetries: React.PropTypes.number,\n    url: React.PropTypes.string\n};\nPlUpload.defaultProps = {\n    name: 'A Person'\n};\n\n// ES6 does not support mixins.\n\nvar oneMeg = 1048576;\nvar tenMeg = oneMeg + 10;\nvar halfMeg = oneMeg / 2;\nvar classSyntaxComponent = React.render(React.createElement(PlUpload, {url: \"/upload_endpoint.php\", chunkSize: halfMeg, maxRetries: 2}), document.getElementById('content'));\n"]}