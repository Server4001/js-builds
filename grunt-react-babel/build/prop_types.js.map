{"version":3,"sources":["not-compiled/prop_types.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,GAAG,KAAK,CAAC,WAAW,CAAC,EAAC,WAAW,EAAE,MAAM;AAC7C,UAAM,EAAE,kBAAW;AACf,eACI,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAE9B,CACH;KACL;CACJ,CAAC,CAAC;;AAEH,IAAI,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,EAAC,WAAW,EAAE,OAAO;AAC/C,aAAS,EAAE;;;AAGP,aAAK,EAAE,eAAS,KAAK,EAAE,QAAQ,EAAE;;;AAG7B,gBAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;;AACjC,uBAAO,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACtD;AACD,gBAAI,KAAK,CAAC,KAAK,GAAG,GAAG,EAAE;AACnB,uBAAO,IAAI,KAAK,eAAa,KAAK,CAAC,KAAK,4BAAyB,CAAC;aACrE;SACJ;KACJ;AACD,UAAM,EAAE,kBAAW;AACf,eACI,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,EAAC,SAAS,EAAE,OAAO,EAAC,EAC3C,IAAI,CAAC,KAAK,CAAC,KAAK,CACnB,CACH;KACL;CACJ,CAAC,CAAC;;AAEH,IAAI,aAAa,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,EAAE,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;;;AAG/G,IAAI,aAAa,GAAG,KAAK,CAAC,WAAW,CAAC,EAAC,WAAW,EAAE,eAAe;AAC/D,UAAM,EAAE,kBAAW;AACf,eACI,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,EAC3B,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAG,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CACjF,CACH;KACL;CACJ,CAAC,CAAC","file":"not-compiled/prop_types.js","sourcesContent":["var Note = React.createClass({displayName: \"Note\",\n    render: function() {\n        return (\n            React.createElement(\"div\", null\n\n            )\n        );\n    }\n});\n\nvar Board = React.createClass({displayName: \"Board\",\n    propTypes: {\n        // This is part of the React library, and assists w/ validation of props. When an invalid value is provided for\n        // a prop, a warning is shown in the console. For performance reasons, propTypes is only checked in dev mode.\n        count: function(props, propName) {\n            // This is the validation function for the prop: count.\n            // Validate that the prop is a number:\n            if (typeof props.count !== \"number\") { // Can also use: props[propName]\n                return new Error(\"Prop 'count' must be a number!\");\n            }\n            if (props.count > 100) {\n                return new Error(`Creating ${props.count} notes is not allowed!`);\n            }\n        }\n    },\n    render: function() {\n        return (\n            React.createElement(\"div\", {className: \"board\"}, \n                this.props.count\n            )\n        );\n    }\n});\n\nvar noteComponent = React.render(React.createElement(Board, {count: \"a\"}), document.getElementById('content'));\n\n// An example of using the JSX \"spread\" syntax to copy all props:\nvar SpreadExample = React.createClass({displayName: \"SpreadExample\",\n    render: function() {\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"a\", React.__spread({},  this.props), this.props.children)\n            )\n        );\n    }\n});\n// You would then use this like so:\n// <SpreadExample href=\"/my/page\" className=\"my-link\" data-whatever=\"super-fly\" id=\"my-id\">Click Here</SpreadExample>\n// This would output:\n// <a href=\"/my/page\" class=\"my-link\" data-whatever=\"super-fly\" id=\"my-id\">Click Here</a>\n"]}