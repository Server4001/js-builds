{"version":3,"sources":["not-compiled/stopwatch.js"],"names":[],"mappings":";;AAAA,IAAI,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,EAAC,WAAW,EAAE,WAAW;AACvD,mBAAe,EAAE,2BAAW;AACxB,eAAO;AACH,gBAAI,EAAE,CAAC;AACP,iBAAK,EAAE,CAAC;AACR,yBAAa,EAAE,IAAI;SACtB,CAAC;KACL;AACD,SAAK,EAAE,iBAAW;AACd,YAAI,CAAC,QAAQ,CAAC;AACV,yBAAa,EAAE,KAAK;SACvB,CAAC,CAAC;;;AAGH,YAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAA,YAAW;AACnC,gBAAI,CAAC,IAAI,EAAE,CAAC;;AAEZ,gBAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;AACjB,oBAAI,CAAC,MAAM,EAAE,CAAC;aACjB;SACJ,CAAA,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;KACvB;AACD,QAAI,EAAE,gBAAW;AACb,YAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;AAC/B,YAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC,CAAC;KAC3B;AACD,YAAQ,EAAE,oBAAW;AACjB,eAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;KAC9C;AACD,UAAM,EAAE,kBAAW;AACf,eAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;;AAEjC,YAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;;;;AAI3D,aAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;;AAEhD,eAAO,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACvC;AACD,YAAQ,EAAE,kBAAS,KAAK,EAAE;AACtB,YAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;;AAE/B,YAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAL,KAAK,EAAE,CAAC,CAAC;KAC5B;AACD,UAAM,EAAE,kBAAW;AACf,eACI,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,EAC3B,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,YAAY,EAAC,CAAC,EACjH,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAC,EAAE,KAAK,CAAC,EAChG,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CACnD,CACH;KACL;CACJ,CAAC,CAAC;;AAEH,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC","file":"not-compiled/stopwatch.js","sourcesContent":["var Stopwatch = React.createClass({displayName: \"Stopwatch\",\n    getInitialState: function() {\n        return {\n            time: 0,\n            until: 5,\n            buttonEnabled: true\n        };\n    },\n    start: function() {\n        this.setState({\n            buttonEnabled: false\n        });\n\n        // We save the interval to this.interval, so it can later be referenced.\n        this.interval = setInterval(function() {\n            this.tick();\n\n            if (this.timeIsUp()) {\n                this.finish();\n            }\n        }.bind(this), 1000);\n    },\n    tick: function() {\n        var time = this.state.time + 1;\n        this.setState({ time });\n    },\n    timeIsUp: function() {\n        return this.state.time >= this.state.until;\n    },\n    finish: function() {\n        console.log(\"DING DING DING!!!\");\n\n        this.setState({ time: 0, until: '', buttonEnabled: true });\n        // Instead, if you wanted to reset the state to the initial values, you could use:\n        //this.replaceState(this.getInitialState());\n\n        React.findDOMNode(this.refs.untilInput).focus();\n\n        return clearInterval(this.interval);\n    },\n    onChange: function(event) {\n        var until = event.target.value;\n\n        this.setState({ until });\n    },\n    render: function() {\n        return (\n            React.createElement(\"div\", null, \n                React.createElement(\"input\", {type: \"text\", value: this.state.until, onChange: this.onChange, ref: \"untilInput\"}), \n                React.createElement(\"button\", {onClick: this.start, disabled: !this.state.buttonEnabled}, \"Go!\"), \n                React.createElement(\"h1\", null, this.state.time)\n            )\n        );\n    }\n});\n\nReact.render(React.createElement(Stopwatch, null), document.body);\n\n/*\nAn example of using a callback function as a ref:\n <input type=\"text\" value={this.state.until} onChange={this.onChange} ref={function(currentComponent) {\n    React.findDOMNode(currentComponent).focus();\n}} />\nThis callback would run once the DOM finished loading this element.\n */\n"]}